<!-- ►► Schema Booster v1.2 ◄◄ -->
<script type="text/javascript">
(function(){
  const VERSION = '1.2';

  /* ========== UTIL ========== */
  const qs  = (sel,ctx=document)=>ctx.querySelector(sel);
  const qsa = (sel,ctx=document)=>[...ctx.querySelectorAll(sel)];
  const txt = el=>el?el.textContent.trim():'';
  const add = (o,k,v)=>{ if(v) o[k]=v; };

  /* Durasi “15 menit” → "PT15M", “1 jam 30 menit” → "PT1H30M" */
  function toISO8601(str){
    if(!str) return '';
    const h = /(\d+)\s*j(?:am)?/i.exec(str);
    const m = /(\d+)\s*m(?:enit)?/i.exec(str);
    let iso='PT';
    if(h) iso+=h[1]+'H';
    if(m) iso+=m[1]+'M';
    return iso==='PT'?'':iso;
  }

  /* Ekstrak angka + satuan sederhana “4 porsi”, “5 serving” */
  function parseYield(str){
    const m=/(\d+)\s*(porsi|serving)/i.exec(str);
    return m?m[1]+' '+m[2].toLowerCase():'';
  }

  /* Ambil angka nutrisi “Kalori 250 kkal”, “Protein 8 g” */
  function parseNutrition(scope){
    const n={ '@type':'NutritionInformation' };
    const grab=(label,prop,unit)=>{
      const r=new RegExp(label+'\\s*(\\d+[\\,\\.]?\\d*)\\s*'+unit,'i');
      const m=r.exec(scope);
      if(m) n[prop]=m[1].replace(',','.')+unit;
    };
    grab('k?kalori','calories','k?kal');
    grab('protein','proteinContent','g');
    grab('lemak','fatContent','g');
    grab('karbohidrat|carb','carbohydrateContent','g');
    return Object.keys(n).length>1?n:null;
  }

  /* Kumpulkan <p>,<li> & li di <ul>/<ol> hingga ketemu selector stop */
  function collect(start, stopSel){
    const a=[]; let el=start.nextElementSibling;
    while(el && !el.matches(stopSel)){
      if(el.matches('p, li')){
        a.push(txt(el));
      }else if(el.matches('ul, ol')){
        el.querySelectorAll('li').forEach(li=>a.push(txt(li)));
      }
      el=el.nextElementSibling;
    }
    return a;
  }

  /* ========== MAIN ========== */
  document.addEventListener('DOMContentLoaded',()=>{
    const art = qs('.post-body, .entry-content'); if(!art)return;

    /* ---- variabel dasar ---- */
    const canonical=(qs('link[rel="canonical"]')||{}).href||location.href.replace(/\?m=\d+/,'');
    const headline = txt(qs('h1.post-title, h1.entry-title'))||document.title;
    const imgCover =   (qs('meta[property="og:image"],meta[property="og:image:secure_url"]')||{}).content
                    || (qs('.post-body img,.entry-content img')||{}).src
                    || 'https://example.com/default-cover.jpg';       // Ubah jika perlu
    const siteName = txt(qs('meta[property="og:site_name"]'))||document.title;
    const authorName= txt(qs('.post-author,.author-name'))||'Author';

    /* ---- BlogPosting ---- */
    const blog={
      '@context':'https://schema.org',
      '@type':'BlogPosting',
      mainEntityOfPage:{'@type':'WebPage','@id':canonical},
      url:canonical,
      headline,
      image:[imgCover],
      publisher:{'@type':'Organization',name:siteName,
                 logo:{'@type':'ImageObject',url:'https://i.imgur.com/CYY4BdE.jpeg'}},
      author:{'@type':'Person',name:authorName}
    };
    add(blog,'datePublished',(qs('abbr.published,time.published')||{}).getAttribute?.('datetime'));
    add(blog,'dateModified',(qs('abbr.updated,time.updated')||{}).getAttribute?.('datetime'));
    add(blog,'description',txt(art).slice(0,160));

    /* ---- FAQ ---- */
    const faq=[];
    qsa('h4',art).forEach(h4=>{
      const q=txt(h4), ans=collect(h4,'h4');
      if(q&&ans.length)faq.push({'@type':'Question',name:q,
        acceptedAnswer:{'@type':'Answer',text:ans.join('\n')}});
    });

    /* ---- Recipe ---- */
    const ingr=[], steps=[], metaBlock=[];
    qsa('h3',art).forEach(h3=>{
      const t=txt(h3).toLowerCase();
      if(t.includes('bahan'))        ingr.push(...collect(h3,'h3'));
      if(t.match(/cara membuat|langkah/))
        collect(h3,'h3').forEach((s,i)=>steps.push({'@type':'HowToStep',position:i+1,text:s}));
      if(t.match(/informasi gizi|nutrition/)) metaBlock.push(...collect(h3,'h3'));
      if(t.match(/waktu|time|durasi/))        metaBlock.push(...collect(h3,'h3'));
    });

    /* Fallback baca data-* attribute */
    const durNode=qs('[data-preptime],[data-cooktime],[data-totaltime]');
    const yieldNode=qs('[data-yield]');
    const nutriNode=qs('[data-calories],[data-protein]');

    let recipe=null;
    if(ingr.length&&steps.length){
      recipe={
        '@type':'Recipe',
        name:headline,
        image:[imgCover],
        recipeIngredient:ingr,
        recipeInstructions:steps,
        author:{'@type':'Person',name:authorName}
      };

      /* --- Durasi & Yield --- */
      add(recipe,'prepTime' , toISO8601(durNode?.dataset.preptime || metaBlock.find(t=>/persiapan|prep/i.test(t))));
      add(recipe,'cookTime' , toISO8601(durNode?.dataset.cooktime || metaBlock.find(t=>/masak|cook/i.test(t))));
      add(recipe,'totalTime', toISO8601(durNode?.dataset.totaltime|| metaBlock.find(t=>/total/i.test(t))));
      add(recipe,'recipeYield', parseYield(yieldNode?.dataset.yield || metaBlock.find(t=>/porsi|serving/i.test(t))));

      /* --- Nutrition --- */
      const nutri=parseNutrition(nutriNode?.textContent||metaBlock.join('\n'));
      if(nutri) recipe.nutrition=nutri;

      /* date & desc inherit */
      add(recipe,'datePublished',blog.datePublished);
      add(recipe,'description',blog.description);

      /* link to BlogPosting */
      blog.mainEntity=recipe;
    }

    /* ---- Inject to <head> ---- */
    const list=[blog];
    if(faq.length) list.push({'@context':'https://schema.org','@type':'FAQPage','mainEntity':faq});
    if(recipe)     list.push({...recipe,'@context':'https://schema.org'});
    list.forEach(o=>{
      const s=document.createElement('script');
      s.type='application/ld+json';
      s.text=JSON.stringify(o);
      s.dataset.schemaBooster=VERSION;
      document.head.appendChild(s);
    });
  });
})();
</script>
<!-- ►► End Schema Booster v1.2 ◄◄ -->
